-- WebSocket implementation
WebSocket = WebSocket or {}

function WebSocket.connect(url)
    if type(url) ~= "string" then
        return nil, "URL must be a string."
    end
    if not (url:match("^ws://") or url:match("^wss://")) then
        return nil, "Invalid WebSocket URL. Must start with 'ws://' or 'wss://'."
    end

    local after_protocol = url:gsub("^ws://", ""):gsub("^wss://", "")
    if after_protocol:match("^%s*$") then
        return nil, "Invalid WebSocket URL. No host specified."
    end

    -- WebSocket object
    return {
        Send = function(message)
            -- Implement Send functionality
        end,
        Close = function()
            -- Implement Close functionality
        end,
        OnMessage = {}, -- Callback for receiving messages
        OnClose = {},   -- Callback for when the WebSocket is closed
    }
end

-- Metatable-related utilities
local metatables = {}
local originalSetMetatable = setmetatable

setmetatable = function(table, meta)
    local object = originalSetMetatable(table, meta)
    metatables[object] = meta
    return object
end

function getrawmetatable(object)
    return metatables[object]
end

function setrawmetatable(object, newMeta)
    local currentMeta = getrawmetatable(object)
    for key, value in pairs(newMeta) do
        currentMeta[key] = value
    end
    return object
end

-- Hidden property utilities
local hiddenProperties = {}

function sethiddenproperty(obj, property, value)
    if not obj or type(property) ~= "string" then
        error("Failed to set hidden property '" .. tostring(property) .. "' on the object: " .. tostring(obj))
    end

    hiddenProperties[obj] = hiddenProperties[obj] or {}
    hiddenProperties[obj][property] = value
    return true
end

function gethiddenproperty(obj, property)
    if not obj or type(property) ~= "string" then
        error("Failed to get hidden property '" .. tostring(property) .. "' from the object: " .. tostring(obj))
    end

    local value = hiddenProperties[obj] and hiddenProperties[obj][property] or nil
    local isHidden = true
    return value or (property == "size_xml" and 5), isHidden
end

-- Hooking metamethods
function hookmetamethod(obj, method, replacement)
    assert(type(obj) == "table" or type(obj) == "userdata", "First argument must be a table or userdata.")
    assert(type(method) == "string", "Second argument must be a string.")
    assert(type(replacement) == "function", "Third argument must be a function.")

    local meta = getrawmetatable(obj)
    local original = meta[method]
    meta[method] = replacement
    return original
end

-- Debugging utilities
function debug.getproto(func, index, mock)
    if mock then
        return { function() return true end } -- Mock function
    end
    return function() return true end
end

function debug.getconstant(func, index)
    local constants = {
        [1] = "print",         -- Example constant
        [2] = nil,             -- Example nil constant
        [3] = "Hello, world!"  -- Example string constant
    }
    return constants[index]
end

function debug.getupvalues(func)
    local found
    setfenv(func, { print = function(val) found = val end })
    func()
    return { found }
end

function debug.getupvalue(func, index)
    local found
    setfenv(func, { print = function(val) found = val end })
    func()
    return found
end
